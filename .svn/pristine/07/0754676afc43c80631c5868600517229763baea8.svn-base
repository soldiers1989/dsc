package com.yixin.kepler.v1.service.impl.yntrust;

import com.yixin.kepler.common.enums.AssetStateEnum;
import com.yixin.kepler.common.enums.BankPhaseEnum;
import com.yixin.kepler.core.constant.CommonConstant;
import com.yixin.kepler.core.listener.ContractSignEvent;
import com.yixin.kepler.dto.BaseMsgDTO;
import com.yixin.kepler.enity.AssetAttachmentRule;
import com.yixin.kepler.enity.AssetContractTask;
import com.yixin.kepler.enity.AssetMainInfo;
import com.yixin.kepler.v1.service.capital.yntrust.YnContractService;

import com.yixin.kepler.v1.service.capital.yntrust.YnContractTaskService;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.Resource;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author sukang
 */
@Service
public class YnContractTaskServiceImpl implements YnContractTaskService {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Resource
    private YnContractService ynContractServiceImpl;

    @Resource
    private ApplicationContext applicationContext;

    @Override
    public void uploadContractFile(AssetContractTask assetContractTask) {

    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void getContractFile(AssetContractTask assetContractTask) {

        try {

            BaseMsgDTO contractFile = ynContractServiceImpl.getContractFile(
                    assetContractTask);

            logger.info("订单号{},贷款标识号{},获取合同文件结果为{}",
                    assetContractTask.getApplyNo(),assetContractTask.getVenusApplyNo()
                    ,contractFile);

            if (contractFile.successed()){
                assetContractTask.setEnd(true);
                assetContractTask.setSuccess(true);
                assetContractTask.setSignState(1);
                assetContractTask.setSignFileId(contractFile.getMessage());

            }
            assetContractTask.setExecState(1);
            assetContractTask.setExecTimes(assetContractTask.getExecTimes() == null ?
                    1 : assetContractTask.getExecTimes() + 1);
            assetContractTask.setNextTime(getNextTime(assetContractTask.getExecTimes()));
            String update = assetContractTask.update();

            //更新成功在发送mq
            if (StringUtils.isNotBlank(update)){
                //如果所有的签章合同完成发送事件
                if (complete(assetContractTask.getVenusApplyNo())){

                    AssetMainInfo mainInfo = AssetMainInfo.getByVenusApplyNo(assetContractTask.getVenusApplyNo());
                    mainInfo.setContractSignState(AssetStateEnum.SUCCESS.getState());
                    mainInfo.update();
                    applicationContext.publishEvent(
                            new ContractSignEvent(assetContractTask.getVenusApplyNo()));
                }
            }
        }catch (Exception e){
            logger.error("订单号{},贷款标识{}获取签章合同文件异常"
                ,assetContractTask.getApplyNo(),
                    assetContractTask.getVenusApplyNo(),e);
        }
    }


    /**
     * 根据执行次数计算下次的执行时间
     * @param execTimes 执行次数
     * @return 下次执行日期
     */
    private Date getNextTime(Integer execTimes) {
        LocalDateTime now = LocalDateTime.now().plusMinutes(execTimes);
        Instant instant = now.atZone(ZoneId.systemDefault()).toInstant();
        return Date.from(instant);
    }










    private boolean complete(String venusApplyNo) {

        List<AssetContractTask> contractTask = AssetContractTask
                .getContractTask(venusApplyNo);

        if (CollectionUtils.isEmpty(contractTask)){
            return false;
        }

        //需要签章的文件数量
        List<AssetAttachmentRule> rules = AssetAttachmentRule
                .getRuleByFinancialAndPhase(CommonConstant.BankName.YNTRUST_BANK,
                BankPhaseEnum.SIGN_CONTRACT.getPhase());
        //签章成功的文件数量
        List<AssetContractTask> filter = contractTask.stream()
                .filter(t -> t.getSignState() == 1)
                .collect(Collectors.toList());

        return  CollectionUtils.isNotEmpty(filter)
                && filter.size() >= (CollectionUtils.isEmpty(rules) ? 1 : rules.size());
    }
}
