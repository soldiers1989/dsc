package com.yixin.dsc.api;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.yixin.common.system.ioc.SpringContextUtil;
import com.yixin.common.system.job.JobExecutor;
import com.yixin.common.utils.InvokeResult;
import com.yixin.common.utils.JobParamDTO;
import com.yixin.dsc.common.DscContant;
import com.yixin.dsc.common.exception.BzException;
import com.yixin.dsc.dto.DscAdmittanceDto;
import com.yixin.dsc.dto.DscFlowResultForAlixDto;
import com.yixin.dsc.dto.own.DscRuleVerifyResultDto;
import com.yixin.dsc.dto.rule.DscMatchResultDto;
import com.yixin.dsc.entity.capital.DscCapitalRuleRelation;
import com.yixin.dsc.entity.rule.DscRule;
import com.yixin.dsc.entity.rule.DscRuleDetail;
import com.yixin.dsc.entity.rule.DscRuleFieldRelation;
import com.yixin.dsc.enumpackage.DscAlixLinkEnum;
import com.yixin.dsc.enumpackage.DscRuleTypeEnum;
import com.yixin.dsc.service.shunt.DscShuntService;
import com.yixin.kepler.common.enums.AssetPhaseEnum;
import com.yixin.kepler.common.enums.AssetStateEnum;
import com.yixin.kepler.common.enums.BankPhaseEnum;
import com.yixin.kepler.common.enums.CreditfrontResultEnum;
import com.yixin.kepler.core.attachment.AttachmentDomain;
import com.yixin.kepler.core.constant.CommonConstant;
import com.yixin.kepler.core.domain.AsyncTask;
import com.yixin.kepler.core.domain.AttachmentUploadFactory;
import com.yixin.kepler.core.domain.webank.LastTrialRequestStrategy;
import com.yixin.kepler.core.listener.ResultNotifyEvent;
import com.yixin.kepler.core.listener.SettleOrderEvent;
import com.yixin.kepler.dto.BaseMsgDTO;
import com.yixin.kepler.dto.BaseReqDTO;
import com.yixin.kepler.dto.OsbAttachmentDTO;
import com.yixin.kepler.enity.AssetBankTran;
import com.yixin.kepler.enity.AssetMainInfo;
import com.yixin.kepler.enity.AssetPaymentFail;
import com.yixin.kepler.enity.AssetPaymentTask;
import com.yixin.kepler.v1.job.BankRequestJobScheduler;

import net.sf.json.JSONObject;

/**
 * Package : com.yixin.dsc.api
 *
 * @author YixinCapital -- wanghonglin
 * 2018/7/6 9:07
 */
@RestController
@RequestMapping(value="/api/dscOwnApi/")
public class DscOwnApi {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());
    @Autowired
    private ApplicationContext ioc;
    @Resource
    AsyncTask asyncTask;
    @Autowired
    private  MongoTemplate mongoTemplate;

    @Autowired
    private DscShuntService shuntService;
    
    @Resource
    private LastTrialRequestStrategy lastTrialRequestStrategy;
    
    @Resource
    private BankRequestJobScheduler jobScheduler;
    
    @Resource
    private AttachmentUploadFactory attachmentUploadFactory;

    /**
     * @Description:根据订单编号查询 不匹配的 规则匹配结果
     * @Author:  weihua
     * @param dscSalesApplyMainDTO
     * @return
     * @exception
     * @date        2018/7/6 10:00
     */
    @RequestMapping(value = "/findNoMachRuleDataByApplyNo")
    public InvokeResult<List<DscMatchResultDto>>   findNoMachRuleDataByApplyNo(@RequestBody String applyNo){
        InvokeResult<List<DscMatchResultDto>> result = new InvokeResult<>();
        if(StringUtils.isBlank(applyNo)){
            result.failure("入参applyNo为空");
        }
        Query query = new Query();
        Criteria criteria = Criteria.where("applyNo").is(applyNo);
        query.addCriteria(criteria);
        query.with(Sort.by(new Sort.Order(Sort.Direction.DESC,"createTime")));
        try{
            List<DscMatchResultDto> dscMatchResultDtos = mongoTemplate.find(query,DscMatchResultDto.class);
            //=========== 将公式定义设置成空，不向前端返回 ====================
            if(CollectionUtils.isNotEmpty(dscMatchResultDtos)){
            	for(DscMatchResultDto resultDto:dscMatchResultDtos){
            		resultDto.setRuleFormula(null);
            	}
            }
            result.setData(dscMatchResultDtos);
        }catch (BzException e){
            logger.error("根据订单编号查询 不匹配的 规则匹配结果{}",e.getMessage());
            result.failure(e.getMessage());
        }catch (Exception e){
            logger.error("根据订单编号查询 不匹配的 规则匹配结果接口异常.",e);
            result.failure("根据订单编号查询 不匹配的 规则匹配结果接口异常");
        }
        return result;
    }


    /**
     * 批量重推结算数据
     * @return 推送结果
     * @author YixinCapital -- chenjiacheng
     *             2018/8/20 15:48
     */
    @RequestMapping(value = "/pushListener",method = RequestMethod.POST)
    public InvokeResult<Boolean> pushListener(@RequestBody String paramApplyNo){
        InvokeResult<Boolean> result = new InvokeResult<>();
        if(StringUtils.isBlank(paramApplyNo) || paramApplyNo.equalsIgnoreCase("all")){
        	List<String> list = AssetBankTran.getPushFileIsFailedData();
        	if(CollectionUtils.isEmpty(list)){
        		return result.failure("未查询到需要推送结算的数据");
        	}
        	logger.info("查询出需要给结算推数的数据有:{}", JSON.toJSONString(list));
        	for (String applyNo : list) {
        		//调用监听推送数据
        		ioc.publishEvent(new SettleOrderEvent(applyNo));
        	}
        }else{
        	ioc.publishEvent(new SettleOrderEvent(paramApplyNo));
        }

        return result.success();
    }


    /**
     * 重发银行请款任务
     * @param reqDTO
     * @return
     */
    @RequestMapping(value = "/paymentReq",method = RequestMethod.POST)
    public InvokeResult<BaseMsgDTO> paymentReq(@RequestBody BaseReqDTO reqDTO){
        InvokeResult<BaseMsgDTO> result = new InvokeResult<BaseMsgDTO>();
        logger.info("重新发起请款,params={}", JSON.toJSONString(reqDTO));
        try{
            BaseMsgDTO msgDTO = new BaseMsgDTO();
            AssetPaymentFail paymentFail = AssetPaymentFail.getByApplyNo(reqDTO.getApplyNo());
            if(paymentFail == null){
                msgDTO.setMessage("不存在银行请求异常记录或已执行成功");
                msgDTO.setCode(DscContant.KeplerCode.FAILD);
                result.setData(msgDTO);
                return result;
            }
            if(StringUtils.equals(paymentFail.getPhase(),reqDTO.getPhase())){
                InvokeResult<BaseMsgDTO> requestBank = asyncTask.requestBank(reqDTO.getApplyNo(),BankPhaseEnum.PAYMENT);
                logger.info("请款订单号{}获取的执行结果为{}",reqDTO.getApplyNo(),JSONObject.fromObject(requestBank).toString());
                BaseMsgDTO baseMsgDTO = (com.yixin.kepler.dto.BaseMsgDTO) requestBank.getData();
                DscFlowResultForAlixDto  forAlixDto = null;
                if (CommonConstant.SUCCESS.equals(baseMsgDTO.getCode())) {
                    ioc.publishEvent(new SettleOrderEvent(reqDTO.getApplyNo()));//推送结算数据
                    paymentFail.setIsSuccess(true);
                    msgDTO.setMessage("重新发起银行请款已执行成功");
                    msgDTO.setCode(DscContant.KeplerCode.SUCCESS);
                    //更新银行记录表
                    AssetPaymentTask assetPaymentTask = AssetPaymentTask.getByApplyNo(reqDTO.getApplyNo());
                    if(assetPaymentTask != null){
                        assetPaymentTask.setIsSuccess(true);
                        assetPaymentTask.setIsEnd(true);
                        assetPaymentTask.update();
                    }
                    forAlixDto = createForAliDto(reqDTO.getApplyNo(),
                            true,baseMsgDTO.getMessage());

                }else if (CommonConstant.FAILURE.equals(baseMsgDTO.getCode())) {
                    paymentFail.setIsSuccess(false);
                    paymentFail.setBankCode(baseMsgDTO.getCode());
                    paymentFail.setBankMessage(baseMsgDTO.getMessage());
                    msgDTO.setMessage(baseMsgDTO.getMessage());
                    msgDTO.setCode(DscContant.KeplerCode.FAILD);

                    forAlixDto = createForAliDto(reqDTO.getApplyNo(),
                            false,baseMsgDTO.getMessage());
                }
                paymentFail.update();
                if (forAlixDto != null) {
                    ioc.publishEvent(new ResultNotifyEvent(forAlixDto));
                }
            }
        }catch (Exception e){
            logger.error("重发银行请款任务异常，异常信息为:",e);
        }

        return result;

    }

    /**
     * 查询当前订单的执行状态
     * @param applyNo 申请编号
     * @return result
     * @author YixinCapital -- chenjiacheng
     *             2018/7/19 17:25
     */
    @RequestMapping(value = "/queryStateOfApplyNo")
    public InvokeResult<Object> queryStateOfApplyNo(@RequestBody String applyNo) {
        InvokeResult<Object> invokeResult = new InvokeResult<>();
        if (StringUtils.isBlank(applyNo)) {
            return invokeResult.failure("申请编号为空");
        }
        AssetMainInfo mainInfo = AssetMainInfo.getByApplyNo(applyNo);
        if (mainInfo == null) {
            return invokeResult.failure("该订单还未与银行交互，请确认订单");
        }
        Map<String,Object> map = new HashMap<>();
        map.put("applyNo", applyNo);
        map.put("phase", AssetPhaseEnum.getPhaseName(mainInfo.getAssetPhase())); //阶段
        map.put("firstTrial", AssetStateEnum.getNameByState(mainInfo.getFirstState())); //初审
        map.put("secTrial", AssetStateEnum.getNameByState(mainInfo.getLastState())); //二审
        map.put("payment", AssetStateEnum.getNameByState(mainInfo.getPaymentState())); //请款
        map.put("afterLoan", AssetStateEnum.getNameByState(mainInfo.getAfterLoanState())); //贷后
        map.put("financialCode", mainInfo.getFinancialCode()); //资方code
        invokeResult.setData(map);
        return invokeResult;
    }

    /**
     * 查询该订单与银行交互的信息
     * @param applyNo 申请编号
     * @return 交互信息
     * @author YixinCapital -- chenjiacheng
     *             2018/7/20 16:33
     */
    @RequestMapping(value = "/queryBankInfoOfApplyNo")
    public InvokeResult<Object> queryBankInfoOfApplyNo(@RequestBody String applyNo) {
        InvokeResult<Object> invokeResult = new InvokeResult<>();
        if (StringUtils.isBlank(applyNo)) {
            return invokeResult.failure("申请编号为空");
        }
        AssetMainInfo mainInfo = AssetMainInfo.findFirstByProperty(AssetMainInfo.class, "applyNo", applyNo);
        if (mainInfo == null) {
            return invokeResult.failure("该订单还未与银行交互，请确认订单");
        }
        Map<String, Object> map = new HashMap<>();
        map.put("applyNo", applyNo);
        map.put("phase", AssetPhaseEnum.getPhaseName(mainInfo.getAssetPhase())); //阶段
        map.put("isDeleted", mainInfo.isDeleted());

        String hql = "select tran from AssetBankTran tran where tran.deleted=false and tran.applyNo=?1 order by tran.createTime asc";
        List<AssetBankTran> bankTranList = AssetBankTran.getRepository().createJpqlQuery(hql).setParameters(new Object[]{applyNo}).list();
        if (CollectionUtils.isNotEmpty(bankTranList)) {
            Map<String, Object> body = new LinkedHashMap<>();
            for (AssetBankTran bankTran : bankTranList) {
                Map<String, Object> contentMap = new HashMap<>();
                contentMap.put("applyNo", bankTran.getApplyNo());
                contentMap.put("phase", bankTran.getPhase());
                contentMap.put("apiCode", bankTran.getApiCode());
                contentMap.put("approvalCode", bankTran.getApprovalCode());
                contentMap.put("approvalDesc", bankTran.getApprovalDesc());
                contentMap.put("repBody", bankTran.getRepBody());

                body.put(bankTran.getId(), contentMap);
            }
            map.put("body", body);
        }
        invokeResult.setData(map);
        return invokeResult;
    }




    /**
     * 临时提供的方法   一审
     * @param applyNo
     * @return
     */

    @Deprecated
    @RequestMapping(value = "/lastTrailReq")
    public InvokeResult<BaseMsgDTO> lastTrailReq(@RequestBody String applyNo) {
        logger.info("微众一审回调接口,通过调用复审/二审 ,{}",applyNo);
        InvokeResult<BaseMsgDTO> iResult = lastTrialRequestStrategy.doIt(applyNo);
        logger.info("微众一审回调接口,通过调用复审/二审 ,{},返回结果：{}",applyNo, JSON.toJSONString(iResult));
        if(iResult !=null && iResult.isSuccess()){
            BaseMsgDTO msgDTO = (BaseMsgDTO) iResult.getData();
            if(StringUtils.equals(msgDTO.getCode(),CommonConstant.SUCCESS)){
                logger.info("微众一审回调接口,通过调用复审/二审 ,{},返回成功",applyNo);
                ioc.publishEvent(new ResultNotifyEvent(this.createForAliDto(applyNo, CreditfrontResultEnum.SUCCESS)));
            } else {
                logger.info("微众一审回调接口,通过调用复审/二审 ,{},返回失败",applyNo);
                ioc.publishEvent(new ResultNotifyEvent(this.createForAliDto(applyNo, CreditfrontResultEnum.REFUSE)));
            }
        } else {
            ioc.publishEvent(new ResultNotifyEvent(this.createForAliDto(applyNo, CreditfrontResultEnum.REFUSE)));
        }

        return iResult;
    }
    
    /**
     * 规则验证接口
     * @param dscAdmittanceDto
     * @return 
     * @author YixinCapital -- wangwenlong
     *	       2018年8月2日 下午5:10:30
     */
    @RequestMapping(value = "/ruleVerify")
    public InvokeResult<DscRuleVerifyResultDto> ruleVerify(@RequestBody DscAdmittanceDto dscAdmittanceDto){
    	InvokeResult<DscRuleVerifyResultDto> iResult = new InvokeResult<>();
    	if(dscAdmittanceDto == null){
			return iResult.failure("规则验证入参为空");
		}
		if(StringUtils.isBlank(dscAdmittanceDto.getApplyNo())){
			return iResult.failure("规则验证订单编号为空");
		}
		String applyNo = dscAdmittanceDto.getApplyNo(); //订单编号
		String capitalCode = dscAdmittanceDto.getCapitalCode(); //资方Code
		try {
			iResult.setData(this.shuntService.ruleVerify(applyNo,capitalCode));
		} catch (BzException e) {
			logger.error("DscOwnApi规则验证接口失败,订单编号:{},错误信息:{}",applyNo, e.getMessage());
			return iResult.failure(e.getMessage());
		} catch (Exception e) {
			logger.error("DscOwnApi规则验证接口失败,订单编号:{},",applyNo, e);
			return iResult.failure("规则验证接口失败");
		}
    	return iResult;
    }


    @RequestMapping(value = "/relaunchAfterLoan")
    @ResponseBody
    public InvokeResult<Object> relaunchAfterLoan(@RequestBody String applyNo) {
        InvokeResult<Object> invokeResult = new InvokeResult<>();
        if (StringUtils.isBlank(applyNo)) {
            return invokeResult.failure("申请编号为空");
        }
        String[] array  = applyNo.split(",");
        Map<String, Object> dataMap = new HashMap<>();
        for (String str : array) {
            try {
                InvokeResult<BaseMsgDTO> requestBank = asyncTask.requestBank(str, BankPhaseEnum.AFTER_LOAN);
                if (requestBank != null && requestBank.getData() != null) {
                    BaseMsgDTO baseMsgDTO = (BaseMsgDTO) requestBank.getData();
                    if (CommonConstant.SUCCESS.equals(baseMsgDTO.getCode())) {
                        dataMap.put(str, "成功");
                        break;
                    }
                }
                dataMap.put(str, "失败");
            } catch (Exception e) {
                logger.error("重新发起贷后请求失败", e);
                dataMap.put(str, "失败");
            }
        }
        invokeResult.setData(dataMap);
        return invokeResult;
    }







    private DscFlowResultForAlixDto createForAliDto(String applyNo, CreditfrontResultEnum resultEnum) {

        DscFlowResultForAlixDto alixDto = new DscFlowResultForAlixDto();
        alixDto.setApplyNo(applyNo);
        alixDto.setCode(resultEnum.getCode());
        alixDto.setLink(DscAlixLinkEnum.CREDITFRONT.getCode());
        alixDto.setMessage(resultEnum.getMsg());
        return alixDto;
    }

    private DscFlowResultForAlixDto createForAliDto(String applyNo,Boolean isSuccess,String msg) {
        return DscFlowResultForAlixDto.createForAliDto(
                applyNo, isSuccess, msg, DscAlixLinkEnum.REQUEST_FUNDS);
    }

    
    
    /**
     * 通用跑批任务挡板
     * @param 任务类名
     * @return 跑批结果
     * @author YixinCapital -- chen.lin
     *	       2018年9月19日 下午4:41:10
     */
    @RequestMapping(value = "/taskBaffle")
    @ResponseBody
    public InvokeResult<String> taskBaffle(@RequestBody String taskName) {
        InvokeResult<String> invokeResult = new InvokeResult<>();
        if (StringUtils.isBlank(taskName)) {
            return invokeResult.failure("任务名称为空");
        }
        if("BankRequestJobScheduler".equals(taskName)){
        	jobScheduler.execute(null);
			logger.info("BankRequestJobScheduler任务跑批完成");
			return new InvokeResult<>("BankRequestJobScheduler任务跑批完成").success();
        } else {
        	JobExecutor jobExecutor = null;
			try {
				jobExecutor = SpringContextUtil.getBean(taskName, JobExecutor.class);
			} catch (NoSuchBeanDefinitionException e) {
				return invokeResult.failure("未发现任务需要跑批");
			} catch (Exception e) {
				return invokeResult.failure("获取跑批任务异常");
			}
        	if(jobExecutor == null){
        		return invokeResult.failure("未发现任务需要跑批");
        	}
        	jobExecutor.execute(new JobParamDTO());
        	logger.info("{}任务跑批完成",taskName);
        	return new InvokeResult<>("任务跑批完成").success();
        }
    }
    
    @SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping(value = "/uploadAttachment",method = RequestMethod.POST)
    @ResponseBody
    public InvokeResult<String> uploadAttachment(@RequestBody OsbAttachmentDTO osbAttachmentDTO){
    	AttachmentDomain attachmentDomain = attachmentUploadFactory.getAttachmentDomain(osbAttachmentDTO);
    	logger.info("订单号{},申请文件上传任务,处理类为{}",osbAttachmentDTO.getBzId(),attachmentDomain.getClass().getName());
    	attachmentDomain.doIt(osbAttachmentDTO);
    	return new InvokeResult<>("success");
    }
    
    
    
    /**
     * 批量重推微众贷后接口
     * @return 
     * @author YixinCapital -- wangwenlong
     *	       2018年9月28日 下午4:37:56
     */
    @RequestMapping(value = "/pushWBAfterloan",method = RequestMethod.POST)
    public InvokeResult<Map<String,Object>> pushWBAfterloan(@RequestBody String applyNoList){
        InvokeResult<Map<String,Object>> result = new InvokeResult<>();
        logger.info("批量重推微众贷后接口开始 -------------------");
        applyNoList = applyNoList == null?"":applyNoList;
        List<String> list = AssetBankTran.getWBAfterloanFailed();
        if(CollectionUtils.isEmpty(list)){
            return result.failure("未查询到需要推送的数据");
        }
        Map<String,Object> resultMap = Maps.newHashMap();
        logger.info("查询出需要重推微众贷后接口的数据有:{}", JSON.toJSONString(list));
        for (String applyNo : list) {
        	if(applyNoList.equals(applyNo)){
        		logger.info("批量重推微众贷后接口,订单编号:{}，排除不请求银行", applyNo);
        		continue;
        	}
        	InvokeResult<BaseMsgDTO> invokeResult = asyncTask.requestBank(applyNo, BankPhaseEnum.AFTER_LOAN);
        	resultMap.put(applyNo, invokeResult);
        }
        logger.info("批量重推微众贷后接口结束 -------------------");
        result.setData(resultMap);
        return result;
    }
    
    /**
     * 指定单号重推微众贷后接口
     * @return 
     * @author YixinCapital -- wangwenlong
     *	       2018年9月28日 下午4:37:56
     */
    @RequestMapping(value = "/pushWBAfterloanByParam",method = RequestMethod.POST)
    public InvokeResult<Map<String,Object>> pushWBAfterloanByParam(@RequestBody String applyNoList){
        InvokeResult<Map<String,Object>> result = new InvokeResult<>();
        logger.info("指定单号重推微众贷后接口开始 -------------------");
        applyNoList = applyNoList == null?"":applyNoList;
        
        String[] applyNoArray = applyNoList.split(",");
        Map<String,Object> resultMap = Maps.newHashMap();
        logger.info("查询出需要重推微众贷后接口的数据有:{}", JSON.toJSONString(applyNoArray));
        for (String applyNo : applyNoArray) {
        	applyNo = applyNo.trim();
        	InvokeResult<BaseMsgDTO> invokeResult = asyncTask.requestBank(applyNo, BankPhaseEnum.AFTER_LOAN);
        	resultMap.put(applyNo, invokeResult);
        }
        logger.info("批量重推微众贷后接口结束 -------------------");
        result.setData(resultMap);
        return result;
    }

    /**
     * 导出所有的规则sql
     * @param capitalId
     * @return
     */
    @RequestMapping(value = "/exportSql",method = RequestMethod.POST)
    public String exportSql(@RequestBody String capitalId){
        logger.info("资方id:{}", capitalId);
        return exportSqling(capitalId);
    }

    /**
     * 准备拼接sql
     * @param capitalId
     * @return
     */
    private String exportSqling(String capitalId) {
        String ss = null;
        try {
            StringBuilder str = new StringBuilder();
            for (DscRuleTypeEnum typeEnum:DscRuleTypeEnum.values()) {
                System.out.println(typeEnum.getName());
                System.out.println(typeEnum.getType());
                List<DscRule> ruleList = DscRule.getDscRuleList(capitalId, typeEnum.getType());
                for (DscRule dscRule : ruleList) {
                    str.append("-- "+typeEnum.getName()+"  " + dscRule.getId() + "开始");
                    //#############规则信息表################
                    str.append(System.getProperty("line.separator"));
                    str.append("INSERT INTO dsc_rule VALUES ('");
//				`id`, `create_time`, `creator_id`, `rule_matching_type`,
//				`rule_name`, `rule_type`, `update_time`, `updator_id`,
//				`version`, `bz_id`, `creator_department_id`, `creator_department_name`,
//				`creator_name`, `is_deleted`, `updator_department_id`,
//				`updator_department_name`, `updator_name`
                    str.append(dscRule.getId());//id
                    str.append("',");
                    str.append("now()");//create_time
                    str.append(",'");
                    str.append(dscRule.getCreatorId());//creator_id
                    str.append("','");
                    str.append(dscRule.getRuleMatchingType());//rule_matching_type
                    str.append("','");
                    str.append(dscRule.getRuleName());//rule_name
                    str.append("','");
                    str.append(dscRule.getRuleType());//rule_type
                    str.append("',");
                    str.append("now()");//update_time
                    str.append(",'");
                    str.append(dscRule.getUpdatorId());//updator_id
                    str.append("','");
                    str.append(dscRule.getVersion());//version
                    str.append("','");
                    str.append(dscRule.getBzId());//bz_id
                    str.append("','");
                    str.append(dscRule.getCreatorDepartmentId());//creator_department_id
                    str.append("','");
                    str.append(dscRule.getCreatorDepartmentId());//creator_department_name
                    str.append("','");
                    str.append(dscRule.getCreatorName());//creator_name
                    str.append("','");
                    str.append(dscRule.isDeleted() ? "\\1" : "\\0");//is_deleted
                    str.append("','");
                    str.append(dscRule.getUpdatorDepartmentId());//updator_department_id
                    str.append("','");
                    str.append(dscRule.getUpdatorDepartmentName());//updator_department_name
                    str.append("','");
                    str.append(dscRule.getUpdatorName());//updator_name
                    str.append("');");
                    String ruleId = dscRule.getId();
                    List<DscRuleDetail> ruleDetailList = DscRuleDetail.getListByRuleId(ruleId);
                    List<DscRuleFieldRelation> dscRuleFieldRelationList = DscRuleFieldRelation.getListByRuleId(ruleId);
                    for (DscRuleDetail detail : ruleDetailList) {
                        str.append(System.getProperty("line.separator"));
                        str.append("INSERT INTO dsc_rule_detail  VALUES (");
//				`id`, `create_time`, `message`, `rule_formula`, `rule_id`, `bz_id`,
//				`creator_department_id`, `creator_department_name`, `creator_id`, `creator_name`,
//				`is_deleted`, `update_time`, `updator_department_id`, `updator_department_name`,
//				`updator_id`, `updator_name`, `version`
                        str.append("REPLACE(UUID(),'-','')");//id
                        str.append(",");
                        str.append("now()");//create_time
                        str.append(",'");
                        str.append(detail.getMessage());//message
                        str.append("','");
                        str.append(detail.getRuleFormula());//rule_formula
                        str.append("','");
                        str.append(detail.getRuleId());//rule_id
                        str.append("','");
                        str.append(detail.getBzId());//bz_id
                        str.append("','");
                        str.append(detail.getCreatorDepartmentId());//creator_department_id
                        str.append("','");
                        str.append(detail.getCreatorDepartmentName());//creator_department_name
                        str.append("','");
                        str.append(detail.getCreatorId());//creator_id
                        str.append("','");
                        str.append(detail.getCreatorName());//creator_name
                        str.append("','");
                        str.append(detail.isDeleted() ? "\\1" : "\\0");//is_deleted
                        str.append("',");
                        str.append("now()");//update_time
                        str.append(",'");
                        str.append(detail.getUpdatorDepartmentId());//updator_department_id
                        str.append("','");
                        str.append(detail.getUpdatorDepartmentName());//updator_department_name
                        str.append("','");
                        str.append(detail.getUpdatorId());//updator_id
                        str.append("','");
                        str.append(detail.getUpdatorName());//updator_name
                        str.append("','");
                        str.append(detail.getVersion());//version
                        str.append("');");
                        str.append(System.getProperty("line.separator"));
                    }

                    for (DscRuleFieldRelation relation : dscRuleFieldRelationList) {
                        str.append(System.getProperty("line.separator"));
                        str.append("INSERT INTO dsc_rule_field_relation VALUES (");
//				`id`, `create_time`, `field_code`, `rule_id`,
//				`bz_id`, `creator_department_id`, `creator_department_name`,
//				`creator_id`, `creator_name`, `is_deleted`, `update_time`,
//				`updator_department_id`, `updator_department_name`, `updator_id`,
//				`updator_name`, `version`, `sequence`
                        str.append("REPLACE(UUID(),'-',''),");//id
                        str.append("now(),'");//create_time
                        str.append(relation.getFieldCode());//field_code
                        str.append("','");
                        str.append(relation.getRuleId());//rule_id
                        str.append("','");
                        str.append(relation.getBzId());//bz_id
                        str.append("','");
                        str.append(relation.getCreatorDepartmentId());//creator_department_id
                        str.append("','");
                        str.append(relation.getCreatorDepartmentName());//creator_department_name
                        str.append("','");
                        str.append(relation.getCreatorId());//creator_id
                        str.append("','");
                        str.append(relation.getCreatorName());//creator_name
                        str.append("','");
                        str.append(relation.isDeleted() ? "\\1" : "\\0");//is_deleted
                        str.append("',");
                        str.append("now()");//update_time
                        str.append(",'");
                        str.append(relation.getUpdatorDepartmentId());//updator_department_id
                        str.append("','");
                        str.append(relation.getUpdatorDepartmentName());//updator_department_name
                        str.append("','");
                        str.append(relation.getUpdatorId());//updator_id
                        str.append("','");
                        str.append(relation.getUpdatorName());//updator_name
                        str.append("','");
                        str.append(relation.getVersion());//version
                        str.append("','");
                        str.append(relation.getSequence());//sequence
                        str.append("');");
                    }
                    List<DscCapitalRuleRelation> ruleRelations = DscCapitalRuleRelation.getListByParms(ruleId,
                            capitalId);
                    for (DscCapitalRuleRelation re : ruleRelations) {
                        str.append(System.getProperty("line.separator"));
                        str.append("INSERT INTO dsc_capital_rule_relation VALUES (");
//				`id`, `capital_id`, `rule_id`, `bz_id`, `create_time`,
//				`creator_department_id`, `creator_department_name`,
//				`creator_id`, `creator_name`, `is_deleted`, `update_time`,
//				`updator_department_id`, `updator_department_name`,
//				`updator_id`, `updator_name`, `version`s
                        str.append("REPLACE(UUID(),'-',''),'");//id
                        str.append(re.getCapitalId());//capital_id
                        str.append("','");
                        str.append(re.getRuleId());//rule_id
                        str.append("','");
                        str.append(re.getBzId());//bz_id
                        str.append("',");
                        str.append("now()");//create_time
                        str.append(",'");
                        str.append(re.getCreatorDepartmentId());//creator_department_id
                        str.append("','");
                        str.append(re.getCreatorDepartmentName());//creator_department_name
                        str.append("','");
                        str.append(re.getCapitalId());//creator_id
                        str.append("','");
                        str.append(re.getCreatorName());//creator_name
                        str.append("','");
                        str.append(re.isDeleted() ? "\\1" : "\\0");//is_deleted
                        str.append("',");
                        str.append("now()");//update_time
                        str.append(",'");
                        str.append(re.getUpdatorDepartmentId());//updator_department_id
                        str.append("','");
                        str.append(re.getUpdatorDepartmentName());//updator_department_name
                        str.append("','");
                        str.append(re.getUpdatorId());//updator_id
                        str.append("','");
                        str.append(re.getUpdatorName());//updator_name
                        str.append("','");
                        str.append(re.getVersion());//version
                        str.append("');");
                    }
                    str.append(System.getProperty("line.separator"));
                    str.append("-- "+typeEnum.getName()+"  " + dscRule.getId() + "结束");
                    str.append(System.getProperty("line.separator"));


                }
            }
            ss = str.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ss.replace("'null'","NULL");
    }


}
