package com.yixin.kepler.v1.service.capital.yntrust;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.yixin.dsc.v1.service.capital.yntrust.YTCommonService;
import com.yixin.kepler.common.enums.AssetStateEnum;
import com.yixin.kepler.common.enums.BankPhaseEnum;
import com.yixin.kepler.core.constant.CommonConstant;
import com.yixin.kepler.enity.AssetBankTran;
import com.yixin.kepler.enity.AssetMainInfo;
import com.yixin.kepler.enity.AssetOrderFlow;
import com.yixin.kepler.enity.AssetResultTask;
import com.yixin.kepler.v1.datapackage.dto.other.LoanInfoDTO;
import com.yixin.kepler.v1.datapackage.dto.yntrust.YTPaymentResultDTO;

@Service("YNTRUSTPaymentCallBackStrategy")
public class PaymentCallBackStrategy {

	private static final Logger LOGGER = LoggerFactory.getLogger(PaymentCallBackStrategy.class);
	
	@Resource
	private YTCommonService commonService;
	
	@Transactional
	public String execute(String callbackjson) {
		JSONObject returnJson = new JSONObject();
		returnJson.put("success", false); //回调是否成功
		if(StringUtils.isBlank(callbackjson)){
			LOGGER.error("云南信托请款结果回调报文为空，返回资方结果为false");
			return returnJson.toJSONString();
		}
		YTPaymentResultDTO paymentDto = null;
		try {
			paymentDto = JSON.parseObject(callbackjson, YTPaymentResultDTO.class);
		} catch (Exception e) {
			LOGGER.error("云南信托请款结果回调报文解析异常，返回资方结果为false，回调报文:{},异常信息:{}",callbackjson,e.getMessage(),e);
			return returnJson.toJSONString();
		}
		if(paymentDto == null || StringUtils.isBlank(paymentDto.getUniqueId())){
			LOGGER.error("云南信托请款结果回调报文解析异常，返回资方结果为false，回调报文:{}",callbackjson);
			return returnJson.toJSONString();
		}
		
		AssetMainInfo assetMainInfo = AssetMainInfo.getByVenusApplyNo(paymentDto.getUniqueId());
		if(assetMainInfo == null){
			LOGGER.error("云南信托请款结果回调报文通过UniqueId获取不到银行交互主表assetMainInfo，返回资方结果为false，UniqueId:{},回调报文:{},",paymentDto.getUniqueId(),callbackjson);
			return returnJson.toJSONString();
		}
		LOGGER.info("云南信托请款结果回调,通过UniqueId：{}，获取到银行交互主表assetMainInfo：{}",paymentDto.getUniqueId(),JSON.toJSONString(assetMainInfo));
		//============= 保存 回调报文 =============================
		this.saveAssetBankTran(paymentDto, callbackjson,assetMainInfo);
		
		//============== 向结算推送订单放款信息 =========================
		LOGGER.info("云南信托请款结果回调-向结算推送订单放款信息 ,订单编号:{},UniqueId:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId());
		LoanInfoDTO loanInfo = paymentDto.getLoanInfo();
		if(loanInfo == null){
			LOGGER.info("云南信托请款结果回调-向结算推送订单放款信息 ,解析云信放款信息为空,订单编号:{},UniqueId:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId());
			returnJson.put("success", false); //回调是否成功
			return returnJson.toJSONString();
		}
		if(!loanInfo.getLoanSuccess()){ //放款没有成功
			LOGGER.info("云南信托请款结果回调-向结算推送订单放款信息 ,解析云信放款信息放款状态为失败,订单编号:{},UniqueId:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId());
			returnJson.put("success", false); //回调是否成功
			return returnJson.toJSONString();
		}
		
		assetMainInfo.setPaymentState(AssetStateEnum.SUCCESS.getState());
		assetMainInfo.update();
		LOGGER.info("云南信托请款结果回调,订单编号:{},UniqueId：{},更新请款状态为成功",assetMainInfo.getApplyNo(),paymentDto.getUniqueId());
		
		loanInfo.setApplyNo(assetMainInfo.getApplyNo()); //订单编号
		loanInfo.setFinancialCode(CommonConstant.BankName.YNTRUST_BANK);
		LOGGER.info("云南信托请款结果回调-向结算推送订单放款信息 ,订单编号:{},UniqueId:{},解析云信放款信息:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId(),JSON.toJSONString(loanInfo));
		commonService.pushSettleLoanInfo(loanInfo);
		
		//============== 停用请款结果主动查询任务 ==================
		Boolean stopResult = AssetResultTask.stopTaskByApplyNo(assetMainInfo.getApplyNo());
		LOGGER.info("云南信托请款结果回调-停用请款结果主动查询任务,订单编号:{},UniqueId:{},操作结果:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId(),stopResult);
		
		//============== 更新k_asset_order_flow 放款时间 ===============
		AssetOrderFlow.recordLoanInfo(assetMainInfo.getApplyNo(), paymentDto.getPaymentDetails(), loanInfo.getLoanDime());
		LOGGER.info("云南信托请款结果回调-更新k_asset_order_flow 放款时间,订单编号:{},UniqueId:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId());
		returnJson.put("success", true); //回调是否成功
		LOGGER.info("云南信托请款结果回调,订单编号:{},UniqueId:{},返回结果:{}",assetMainInfo.getApplyNo(),paymentDto.getUniqueId(),returnJson.toJSONString());
		return returnJson.toJSONString();
	}
	
	
	private void saveAssetBankTran(YTPaymentResultDTO paymentDto,String json,AssetMainInfo assetMainInfo){
		LOGGER.info("云南信托请款结果回调，唯一标识uniqueId：{},保存 回调报文 ",paymentDto.getUniqueId());
		AssetBankTran callbackTran = new AssetBankTran();
		callbackTran.setTranNo(null); //业务流水
		callbackTran.setReqBody(json);
		callbackTran.setApplyNo(assetMainInfo.getApplyNo());
		callbackTran.setAssetId(assetMainInfo.getId());
		callbackTran.setBankOrderNo(assetMainInfo.getBankOrderNo()); //云信唯一交互标识
		
		callbackTran.setPhase(BankPhaseEnum.PAYMENT.getPhase());
		callbackTran.setReqUrl(null);
		callbackTran.setApiCode(null); //
		callbackTran.setSender(CommonConstant.SenderType.BANK); 
		callbackTran.setRepBody(null); //相应
		callbackTran.setApprovalCode(null); //错误码
		callbackTran.setApprovalDesc(null); //错误描述
		callbackTran.create();
	}
}
