package com.yixin.kepler.v1.service.capital.yntrust;

import com.alibaba.fastjson.JSON;
import com.yixin.common.exception.BzException;
import com.yixin.common.utils.InvokeResult;
import com.yixin.dsc.entity.order.DscSalesApplyCust;
import com.yixin.dsc.entity.order.DscSalesApplyMain;
import com.yixin.dsc.util.PropertiesManager;
import com.yixin.dsc.v1.service.capital.yntrust.YTCommonService;
import com.yixin.kepler.common.RestTemplateUtil;
import com.yixin.kepler.common.UrlConstant;
import com.yixin.kepler.common.enums.BankPhaseEnum;
import com.yixin.kepler.core.base.AbstractBaseDealDomain;
import com.yixin.kepler.core.constant.CommonConstant;
import com.yixin.kepler.dto.BaseMsgDTO;
import com.yixin.kepler.enity.AssetBankTran;
import com.yixin.kepler.enity.AssetMainInfo;
import com.yixin.kepler.v1.common.enumpackage.YNTrustUrlEnum;
import com.yixin.kepler.v1.datapackage.dto.yntrust.YTCommonResponseDTO;
import com.yixin.kepler.v1.datapackage.dto.yntrust.YTCommonStatusDTO;
import com.yixin.kepler.v1.datapackage.dto.yntrust.YTFileUploadRequestDTO;

import net.sf.json.JSONObject;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;

/**
 * @author sukang
 */

@Service(value = "YNTRUSTFileUploadRequsetStrategy")
public class FileUploadRequestStrategy extends AbstractBaseDealDomain<YTFileUploadRequestDTO,BaseMsgDTO>{


    private final Logger logger = LoggerFactory.getLogger(getClass());

    @Resource
    private PropertiesManager propertiesManager;
    @Resource
    private YTCommonService commonService;

    @Override
    protected void getData() throws BzException {

        YTFileUploadRequestDTO ytFileUploadRequestDto = inputDto.get();
        String applyNo = ytFileUploadRequestDto.getRemark();
        DscSalesApplyMain dscSalesApplyMain = DscSalesApplyMain
                .getByApplyNo(applyNo);

        DscSalesApplyCust dscSalesApplyCust =
                DscSalesApplyCust.getApplyCostByMianId(dscSalesApplyMain.getId());

        AssetMainInfo mainInfo = AssetMainInfo.getByApplyNo(applyNo);

        ytFileUploadRequestDto.setRequestId(commonService.getRequestId());
        ytFileUploadRequestDto.setIDCardNo(dscSalesApplyCust.getAzjhm());
        ytFileUploadRequestDto.setUrl(YNTrustUrlEnum.FILE_UPLOAD.getUrl());
        ytFileUploadRequestDto.setUniqueId(mainInfo.getVenusApplyNo());
    }

    @Override
    protected void assembler() throws BzException {

    }

    @Override
    protected InvokeResult<BaseMsgDTO> message() throws BzException {

        YTFileUploadRequestDTO ytFileUploadRequestDto = inputDto.get();
        inputDto.remove();
        JSONObject reqJson = JSONObject.fromObject(ytFileUploadRequestDto);

        logger.info("单号{},上传文件请求参数为{}",
                ytFileUploadRequestDto.getRemark(),reqJson);

        AssetBankTran bankTran = new AssetBankTran();
        bankTran.setApplyNo(ytFileUploadRequestDto.getRemark());
        bankTran.setPhase("yt_get_contract_file");
        bankTran.setReqBody(reqJson.remove("ImageContent").toString());

        String url = propertiesManager.getOsbEnvironment()
                .concat(UrlConstant.OsbSystemUrl.ynTrustFileInterface);

        bankTran.setReqUrl(url.concat(ytFileUploadRequestDto.getUrl()));
        bankTran.setTranNo(ytFileUploadRequestDto.getRequestId());
        bankTran.setSender(CommonConstant.SenderType.YIXIN);
        bankTran.create();

        logger.info("\n单号{}云信上传文件请求报文{}",
                ytFileUploadRequestDto.getRemark(),bankTran.getReqBody());

        String result = RestTemplateUtil.sendRequest(bankTran.getReqUrl(),
                ytFileUploadRequestDto, CommonConstant.BankName.YNTRUST_BANK);
        bankTran.setRepBody(result);
        logger.info("\n云信上传文件接口返回报文为{}",result);


        BaseMsgDTO baseMsgDTO = BaseMsgDTO.failureData("接口异常");
        if (StringUtils.isNotEmpty(result)){
            YTCommonResponseDTO ytCommonResponseDTO = JSON.parseObject(result, YTCommonResponseDTO.class);
            YTCommonStatusDTO status = ytCommonResponseDTO.getStatus();
            if (status.success()){
                bankTran.setApprovalCode(status.getResponseCode());
                bankTran.setApprovalDesc(status.getResponseMessage());
                baseMsgDTO = BaseMsgDTO.successData("success");
            }else {
                bankTran.setApprovalDesc(status.getResponseCode());
                bankTran.setApprovalDesc(status.getWarningMessage());
                baseMsgDTO = BaseMsgDTO.failureData(bankTran.getApprovalDesc());
            }
        }

        bankTran.update();
        return new InvokeResult<>(baseMsgDTO);
    }
}
