package com.yixin.kepler.core.domain.webank;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.yixin.common.exception.BzException;
import com.yixin.common.system.ioc.SpringContextUtil;
import com.yixin.common.utils.DateUitls;
import com.yixin.common.utils.InvokeResult;
import com.yixin.common.utils.JsonObjectUtils;
import com.yixin.dsc.dto.*;
import com.yixin.dsc.entity.order.DscSalesApplyCar;
import com.yixin.dsc.entity.order.DscSalesApplyCust;
import com.yixin.dsc.entity.order.DscSalesApplyMain;
import com.yixin.dsc.enumpackage.DscAlixLinkEnum;
import com.yixin.dsc.service.common.DscWbCommonService;
import com.yixin.dsc.util.PropertiesManager;
import com.yixin.kepler.api.KeplerBankAPI;
import com.yixin.kepler.common.RestTemplateUtil;
import com.yixin.kepler.common.UrlConstant;
import com.yixin.kepler.common.enums.*;
import com.yixin.kepler.core.base.AbstractBaseDealDomain;
import com.yixin.kepler.core.constant.CommonConstant;
import com.yixin.kepler.core.domain.SysDIcMapped;
import com.yixin.kepler.core.listener.ResultNotifyEvent;
import com.yixin.kepler.dto.BaseMsgDTO;
import com.yixin.kepler.dto.webank.*;
import com.yixin.kepler.enity.*;
import org.apache.commons.lang3.StringUtils;
import org.assertj.core.util.Lists;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * 请求银行初审/一审 策略类 --微众  贷款申请接口
 * Package : com.yixin.kepler.core.domain.webank
 * 
 * @author YixinCapital -- wangwenlong
 *		   2018年7月9日 下午4:50:56
 *
 */
@Service("WeBankFirstTrialRequestStrategy")
public class FirstTrialRequestStrategy extends AbstractBaseDealDomain<Object, BaseMsgDTO>{
	
	public static final Logger logger = LoggerFactory.getLogger(FirstTrialRequestStrategy.class);
	
	@Resource 
	private PropertiesManager propertiesManager;
	
	@Resource
	private DscWbCommonService commonService;
	
	@Resource 
    private SysDIcMapped sysDIcMapped;
	
	@Autowired
	private MongoTemplate mongoTemplate;
	
	@Autowired
	private ApplicationContext ioc;
	
    private ThreadLocal<AssetMainInfo> assetMainInfoThreadLocal = new ThreadLocal<>();
    
    private ThreadLocal<DscSalesApplyMain> applyMainInfoThreadLocal = new ThreadLocal<>();

    private ThreadLocal<DscElecActionInfoDto> signInfoThreadLocal = new ThreadLocal<>();
    
	@Override
	protected void getData() throws BzException {
		String applyNo = String.valueOf(inputDto.get());
		logger.info("申请单号为{},一审,获取申请主表",applyNo);
		DscSalesApplyMain mainInfo = DscSalesApplyMain.getByApplyNo(applyNo);
        if(mainInfo == null){
        	logger.error("申请单号为{},申请编号错误，查询不到订单信息",applyNo);
        	throw new BzException("申请编号错误，查询不到订单信息");
        }
        logger.info("申请单号为{},一审,获取银行交互主表",applyNo);
		AssetMainInfo assetMainInfo = AssetMainInfo.getByApplyNo(applyNo);
        if(assetMainInfo == null){
        	assetMainInfo = this.createAssertMainInfo(mainInfo);
        }
        logger.info("申请单号为{},一审,获取微众征信表",applyNo);
        AssetElecCreditInfo signInfo = AssetElecCreditInfo.getCreditSignByApplyNo(applyNo);
        if(signInfo == null || StringUtils.isBlank(signInfo.getCreditInfo())){
        	logger.error("申请单号为{},申请编号错误，微众征信未签署",applyNo);
        	throw new BzException("申请编号错误，微众征信未签署");
        }
		try {
			DscElecActionInfoDto signDetail = JSON.parseObject(signInfo.getCreditInfo(), DscElecActionInfoDto.class);
			signInfoThreadLocal.set(signDetail);
		} catch (Exception e) {
			logger.error("申请单号为{},解析微众征信信息异常",applyNo,e);
		}
		assetMainInfo.setCreditSignState(AssetStateEnum.SUCCESS.getState()); //电子征信
		assetMainInfo.update();
		
        applyMainInfoThreadLocal.set(mainInfo);;
        assetMainInfoThreadLocal.set(assetMainInfo);
    }

	@Override
	protected void assembler() throws BzException {
		String applyNo = String.valueOf(inputDto.get());
        logger.info("申请单号为{},开始封装银行请求参数",applyNo);
        DscSalesApplyMain mainInfo = applyMainInfoThreadLocal.get();
        DscSalesApplyCust applyCust = DscSalesApplyCust.getOneByMainId(mainInfo.getId());
        if(applyCust == null){
        	logger.error("申请单号为{},申请编号错误，客户信息不存在",applyNo);
        	throw new BzException("申请编号错误，客户信息不存在");
        }
        DscSalesApplyCar applyCar = DscSalesApplyCar.getBymainId(mainInfo.getId());
        if(applyCar == null){
        	logger.error("申请单号为{},申请编号错误，车辆信息不存在",applyNo);
        	throw new BzException("申请编号错误，车辆信息不存在");
        }
        
        
        WBFirstRequestDTO requestDto = new WBFirstRequestDTO();
        inputDto.set(requestDto);
        
        //===============请求头信息 开始=====================
        /**
    	 * 平台ID 微众分配的固定值
    	 * 	850130008290001（上海易鑫融资租赁有限公司）
    	 *  850130008110001（天津恒通嘉合融资租赁有限公司）
    	 */
        requestDto.setMerchantId(commonService.getMerchantIdByCompanyCode(mainInfo.getRentingCompanyCode())); //平台ID 微众分配的固定值
        requestDto.setTxnId(WBTransCodeEnum.FIRST_TRIAL.getTransCode()); //交易服务码 90031
        requestDto.setOpId(mainInfo.getTlrNo()); //操作员号 /提报账号
        requestDto.setChannel(commonService.getWbChannelByOrderSource(mainInfo.getOrderSource())); //渠道 /根据订单来源转换
        requestDto.setReqTime(new Date()); //请求时间
        //===============请求头信息 结束=====================
        //===============申请人基本信息域 开始=====================
        requestDto.setAkhxm(applyCust.getAkhxm()); //姓名--申请人姓名
        requestDto.setAzjlx(codeConvert("azjlx", applyCust.getAzjlx())); //证件提交类型/证件类型
        requestDto.setAzjhm(applyCust.getAzjhm()); //证件号码/身份证号码
        requestDto.setAsjhm(applyCust.getAsjhm()); //注册手机号/注册手机号
        requestDto.setAzjhm2(applyCust.getAzjhm()); //用户平台id 填合作方平台系统中的客户唯一编号，如无则填写身份证号码/身份证号码
        requestDto.setFshnx(convertBigDecimal(applyCust.getFshnx(),"fshnx")); //月均收入水平 /税后年薪(万元)/12，映射范围内
        
        //===============申请人基本信息域 结束=====================
        //===============代理人域 开始=====================
        if(StringUtils.isNotBlank(mainInfo.getTlrNo()) && mainInfo.getTlrNo().length()>20) {
            requestDto.setSalesDomainAccount(mainInfo.getTlrNo().substring(0, 20)); //代理人用户id / 提报账号
        }else {
            requestDto.setSalesDomainAccount(mainInfo.getTlrNo()); //代理人用户id / 提报账号
        }
        requestDto.setFinancialManagerName(applyCar.getFinancialManagerName()); //代理人姓名 / 分公司金融经理
        requestDto.setSalesPhone(mainInfo.getPhone()); //代理人手机号 / 销售预留手机
        requestDto.setDealerChannelProvinceName(mainInfo.getAsfName()); //SP代理人公司所在省 / 经销商渠道所在省名称
        requestDto.setDealerChannelCityName(mainInfo.getAcsName()); //SP代理人公司所在市 / 经销商渠道所在市名称
        requestDto.setDealerChannelDetailedAddress(mainInfo.getAdmdz()); //SP代理人公司详细地址 / 经销商渠道详细地址
        
        /**
         * 微众90031 申请提交接口的SP公司ID  ，原来传渠道id给微众，现传默认值TG0726。只是暂时方案，等银行扩展完，还回复传alix渠道id给银行
         * modify by wangwenlong on 2018-08-09 计划 2018-08-09 晚上线
         */
        requestDto.setDealerChannelId(mainInfo.getAid()); //SP公司ID / 经销商渠道id
        //requestDto.setDealerChannelId("TG0726"); //SP公司ID / 经销商渠道id
        
        requestDto.setAffiliatedInstitutions(mainInfo.getAffiliatedInstitutions()); //SP代理人企业名称 / 所属机构
        //===============代理人域 结束=====================
        //===============他行银行卡 开始=====================
        List<WBBankCardDTO> bankCardAcct = Lists.newArrayList();
        WBBankCardDTO cardDto = new WBBankCardDTO();
        cardDto.setBankCardUsage(CardUsage.FOUR); //卡用途 /验四
        cardDto.setBankCardNo(mainInfo.getAhkrjjkzh()); //易鑫验证四要素还款卡号
        cardDto.setBankCardReservePhone(mainInfo.getAckrsjhm()); //易鑫验证四要素银行预留手机号码
        SysCardBin cardBin = SysCardBin.getCardBin(mainInfo.getAhkrjjkzh(), CommonConstant.BankName.WB_BANK);
        if(cardBin != null){
        	cardDto.setBankCardBrno(cardBin.getCardNumber().trim()); //卡开户行联行号
        	cardDto.setBankCardBrname(cardBin.getCardName().trim()); //卡开户行名
        } else {
        	cardDto.setBankCardBrno(null); //卡开户行联行号
        	cardDto.setBankCardBrname(null); //卡开户行名
        }
        bankCardAcct.add(cardDto);
        requestDto.setBankCardAcct(bankCardAcct); //他行银行卡
        //===============他行银行卡 结束=====================
        
        this.initSignInfo(requestDto, applyNo);;
        //===============合作方平台信息域 开始=====================
        requestDto.setMerBizNo(mainInfo.getApplyNo()); //申请编号
        //===============合作方平台信息域 结束=====================
        inputDto.set(requestDto);
	}

	@Override
	protected InvokeResult<BaseMsgDTO> message() throws BzException {
       
        //获取参数
		WBFirstRequestDTO requestDto = (WBFirstRequestDTO) inputDto.get();
        AssetMainInfo assetMainInfo = assetMainInfoThreadLocal.get();
        assetMainInfoThreadLocal.remove();
        inputDto.remove();
        signInfoThreadLocal.remove();
        
        /*//民生银行验证金额参数
        String chekMsg = null;
        if ((chekMsg = checkTransAmt(reqData)) != null) {
            return new InvokeResult<>(new BaseMsgDTO(
            		CommonConstant.FAILURE,chekMsg));
        }*/
        String osbUrl = this.propertiesManager.getOsbEnvironment() + UrlConstant.OsbSystemUrl.weBankInterface + WBTransCodeEnum.FIRST_TRIAL.getTransCode();
        //添加银行交易信息
        AssetBankTran assetBankTran = new AssetBankTran();
        assetBankTran.setReqBody(JsonObjectUtils.objectToJson(requestDto));
        assetBankTran.setApplyNo(assetMainInfo.getApplyNo());
        assetBankTran.setAssetId(assetMainInfo.getId());

        assetBankTran.setPhase(BankPhaseEnum.FIRST_TRIAL.getPhase());
        assetBankTran.setReqUrl(osbUrl);
        assetBankTran.setApiCode(requestDto.getTxnId());
        assetBankTran.setSender(CommonConstant.SenderType.YIXIN);
        assetBankTran.create();

        //发送银行请求并获取返回结果json
        logger.info("\n开始请求银行初审/一审处理,申请编号:{},请求参数为{}",assetMainInfo.getApplyNo(),assetBankTran.getReqBody());
        String result = RestTemplateUtil.sendRequest(osbUrl, requestDto,CommonConstant.BankName.WB_BANK);
        logger.info("\n开始请求银行初审/一审处理,申请编号:{},返回结果为{}",assetMainInfo.getApplyNo(),result);
        
        if(StringUtils.isBlank(result)){
        	return new InvokeResult<>(new BaseMsgDTO(CommonConstant.FAILURE,"初审失败"));
        } 
        
        String jsonResponse = commonService.parseResponse(result);
        WBFirstResponseDTO response = (WBFirstResponseDTO) JsonObjectUtils.jsonToObject(jsonResponse, new WBFirstResponseDTO());
        
        assetBankTran.setRepBody(result);
        assetBankTran.setApprovalCode(response.getCode()); //错误码
        assetBankTran.setApprovalDesc(response.getDesc()); //错误描述
        assetBankTran.setTranNo(response.getBizSeqNo()); //业务流水号  微众端流水号，可用于匹配申请结果异步回调通知
        assetBankTran.update();
        
        /**
         * 一审提交	
         * 0000	申请提交成功
         * 0002	未满足接口输入要求
         * 0113	数据规则检查不过
         * 1004	申请提交受理失败
         * 1303	年龄校验不过
         * 1037	用户平台id占用
         * 0111	合同版本号校验失败
         * 1017	公安实名认证失败
         */
	      //如果银行信审申请成功,添加查询任务。
	      if (response.getCode().contains(CommonConstant.WB_RESP_CODE)) {
		      assetMainInfo.setAssetPhase(AssetPhaseEnum.TRIAL.getPhase());
	    	  assetMainInfo.setFirstState(AssetStateEnum.DOING.getState()); //进行中
	    	  assetMainInfo.update();
	    	  
	    	  this.saveMongoInfo(assetMainInfo,requestDto);
	    	  
	    	//开关  0/请求银行  1不校验       为1时 返回直接通过
	    	  String flag = ConstantConfig.getStringValeByKey(ConstantKeyEnum.WEBANK_INTERFACE_FLAG.getKey());
	    	  if("1".equals(flag)){  //走挡板数据，自己触发一审回调
	    		  //{"SeqNo":"","Plain":{"APP_NO":"11102018081000807140","PSB_PARAMS":"{\"MAX_CREDIT_LIMIT\":\"200000\",\"IS_RISK_TAG_HIT\":\"N\",\"MIN_PAY_RATIO\":\"\",\"PBC_CUST_TYPE\":\"微众A类\"}","BIZ_SEQ_NO":"18081001D06084083802462568231357","APS_STATUS":"SUCC","TXN_ID":"92002","MER_BIZ_NO":"1000268161","APS_DESC":"审批通过","MERCHANT_ID":"850130008290001","APS_CODE":"66510000"}} 
	    		  String weBankjson = ConstantConfig.getStringValeByKey(ConstantKeyEnum.WEBANK_FIRST_TRIAL_CALLBACK_JSON.getKey());
	    		  if(StringUtils.isNotBlank(weBankjson)){
	    			  logger.info("一审回调挡板 ，申请编号：{},报文：{}",assetMainInfo.getApplyNo(),weBankjson);
	    			  JSONObject oriJson = JSONObject.parseObject(weBankjson);
	    			  JSONObject synJson = oriJson.getJSONObject("Plain");
	    			  synJson.put("MER_BIZ_NO",  assetMainInfo.getApplyNo());
	    			  logger.info("一审回调挡板 ，申请编号：{},报文：{},转换后：{}",assetMainInfo.getApplyNo(),weBankjson,oriJson.toJSONString());
	    			  KeplerBankAPI keplerBankAPI = SpringContextUtil.getApplicationContext().getBean(KeplerBankAPI.class);
	    			  keplerBankAPI.keplerWeBank(oriJson.toJSONString());
	    		  }
	    	  }
	          return new InvokeResult<>(new BaseMsgDTO(CommonConstant.SUCCESS, "SUCCESS"));
	      }else {
	    	  assetMainInfo.setFirstState(AssetStateEnum.FAILD.getState()); //失败
	    	  assetMainInfo.update();
	    	  logger.info("微众一审失败，申请编号:{},向Alix反推结果:{}, 100001/信审拒绝",assetMainInfo.getApplyNo());
	    	  ioc.publishEvent(new ResultNotifyEvent(this.createForAliDto(assetMainInfo.getApplyNo(), CreditfrontResultEnum.REFUSE)));
	      }
        return new InvokeResult<>(new BaseMsgDTO(CommonConstant.FAILURE,"初审失败"));
    }
	
	
	private String codeConvert(String code,String value){
		return sysDIcMapped.getMappingValue(code,value, CommonConstant.BankName.WB_BANK);
	}
	

	/**
	 * 转换数字
	 * @param source
	 * @param type
	 * @return 
	 * @author YixinCapital -- wangwenlong
	 *	       2018年7月9日 下午6:29:34
	 */
	private String convertBigDecimal(BigDecimal source,String type){
		String target = "";
		/**
		 * 月均收入范围	MONTHLY_INCOME_RANGE	
		 * R01--3000以下
		 * R02--3000~5000(含3000)
		 * R03--5000~8000
		 * R04--8000~12000
		 * R05--12000~20000
		 * R06--20000以上
		 */

		switch (type) {
		case "fshnx": //月均收入水平
			source = source.divide(new BigDecimal(12),2,BigDecimal.ROUND_HALF_UP).multiply(new BigDecimal("10000"));
			if(BigDecimal.valueOf(3000).compareTo(source) >0){
				target = "R01";
			} else if (BigDecimal.valueOf(5000).compareTo(source) >0){
				target = "R02";
			} else if (BigDecimal.valueOf(8000).compareTo(source) >0){
				target = "R03";
			} else if (BigDecimal.valueOf(12000).compareTo(source) >0){
				target = "R04";
			} else if (BigDecimal.valueOf(20000).compareTo(source) >0){
				target = "R05";
			} else {
				target = "R06";
			}
			break;

		default:
			break;
		}
		
		return target;
	}
	
	/**
	 * 初始化签约信息
	 * 合同协议信息 + 客户行为存证域 + 用户系统环境域
	 * @param requestDto
	 * @param applyNo 
	 * @author YixinCapital -- wangwenlong
	 *	       2018年7月12日 上午11:49:13
	 */
	private void initSignInfo(WBFirstRequestDTO requestDto,String applyNo){
		DscElecActionInfoDto signDetail = signInfoThreadLocal.get();
		
		//===============合同协议  开始=====================
	    List<WBContractDTO> contractBase = Lists.newArrayList();
	    for(DscSignContractDto contract:signDetail.getSignContractList()){
	    	contractBase.add(new WBContractDTO(contract.getContractName(), contract.getContractVersion(), contract.getCheckTime()));
	    }
	    requestDto.setContractBase(contractBase); //
	    //===============合同协议 结束=====================
	    
	    //===============客户行为存证域 开始=====================
	    DscUserActionDto userActionDto = signDetail.getUserActionDto();
	    requestDto.setClickSmsTime(userActionDto.getClickSmsTime()); //点击“获取验证码”时间   
	    requestDto.setSysSendSmsTime(userActionDto.getSysSendSmsTime()); //系统发送验证码时间
	    requestDto.setCheckSmsMobile(userActionDto.getCheckSmsMobile()); //接收验证码手机号码
	    requestDto.setCheckPwdSucTime(userActionDto.getCheckPwdSucTime());  //验密通过时间
	    requestDto.setCheckSmsSucTime(userActionDto.getCheckSmsSucTime()); //验短通过时间
	    requestDto.setApplyTime(userActionDto.getApplyTime()); //提交申请时间
	    requestDto.setClickTaxableTime(userActionDto.getClickTaxableTime()); //点击"纳税居民申明"时间
	    requestDto.setOtpSendTime(userActionDto.getOtpSendTime()==null?"0":String.valueOf(userActionDto.getOtpSendTime())); //OTP验证发送次数
	    requestDto.setOptErrTime(userActionDto.getOtpErrTime()==null?"0":String.valueOf(userActionDto.getOtpErrTime())); //OTP验证失败次数
	    //===============客户行为存证域 结束=====================
	    //===============用户系统环境域 开始=====================
	    DscOperateEnvDto operateEnvDto = signDetail.getOperateEnvDto();
	    requestDto.setOsType(StringUtils.isBlank(operateEnvDto.getOsType())?"pc":operateEnvDto.getOsType()); //操作系统
	    requestDto.setMobileBrands(operateEnvDto.getMobileBrands()); //手机品牌
	    requestDto.setIosIdFa(operateEnvDto.getIosIdfa()); //ios设备必须填写 idfa
	    requestDto.setAndroidImei(operateEnvDto.getAndroidIMEI()); //andriod设备必须填写
	    requestDto.setIp(StringUtils.isBlank(operateEnvDto.getIp())?commonService.getServerIp():operateEnvDto.getIp()); //IP
	    requestDto.setMacAddr(operateEnvDto.getMacAddr()); //mac地址
	    //===============用户系统环境域 结束=====================
	}
	
	private AssetMainInfo createAssertMainInfo(DscSalesApplyMain applyMainInfo) {
		AssetMainInfo mainInfo = new AssetMainInfo();
        mainInfo.setApplyNo(applyMainInfo.getApplyNo()); // 申请编号
        mainInfo.setAssetPhase(AssetPhaseEnum.TRIAL.getPhase());
        mainInfo.setCreditSignState(AssetStateEnum.INIT.getState());
        mainInfo.setContractSignState(AssetStateEnum.INIT.getState());
        mainInfo.setFirstState(AssetStateEnum.INIT.getState());
        mainInfo.setLastState(AssetStateEnum.INIT.getState());
        mainInfo.setPreState(null);
        mainInfo.setPaymentState(AssetStateEnum.INIT.getState());
        mainInfo.setAssetNo(null);
        mainInfo.setChannelCode(applyMainInfo.getDealerChannelCode()); // 渠道编号
        mainInfo.setChannelName(applyMainInfo.getDealerChannelName()); // 渠道名称
        mainInfo.setCompanyCode(applyMainInfo.getRentingCompanyCode()); // 发起融资公司编号
        mainInfo.setFinancialCode(CommonConstant.BankName.WB_BANK); //微众
        mainInfo.setFinancialId(applyMainInfo.getCapitalId());
        mainInfo.create();
        return mainInfo;
	}
	
	private void saveMongoInfo(AssetMainInfo assetMainInfo,WBFirstRequestDTO requestDto){
		 try {
			 WBMongoDTO mongoDto = new WBMongoDTO();
			 mongoDto.setSign(DateUitls.dateToStr(new Date(), "yyyy-MM-dd_HH:mm:SS")); //时间标识
			 mongoDto.setApplyNo(assetMainInfo.getApplyNo()); //申请编号
			 
			 WBBankCardDTO bankCard = requestDto.getBankCardAcct().get(0);//他行银行卡
			 
			 mongoDto.setAkhxm(requestDto.getAkhxm()); //申请人姓名 
			 mongoDto.setAzjhm(requestDto.getAzjhm()); //证件号码
			 mongoDto.setAsjhm(requestDto.getAsjhm()); //手机号码
			 mongoDto.setAhkrjjkzh(bankCard.getBankCardNo()); //借记卡帐号 /易鑫验证四要素还款卡号
			 mongoDto.setAckrsjhm(bankCard.getBankCardReservePhone()); //易鑫验证四要素银行预留手机号码
			 
			 logger.info("微众一审成功，向mongo中存放信息，申请编号：{},{}",assetMainInfo.getApplyNo(),JSON.toJSONString(mongoDto));
			 //往mogo里存放一审的请求信息保存到MongoDB中，用户再次信审时，校验四要素信息
			 this.mongoTemplate.save(mongoDto);
		} catch (Exception e) {
			logger.error("微众一审成功，保存MongoDB信息异常，订单编号:{}",assetMainInfo.getApplyNo(), e);
		}
	}
	
	private DscFlowResultForAlixDto createForAliDto(String applyNo,CreditfrontResultEnum resultEnum) {
		
		DscFlowResultForAlixDto alixDto = new DscFlowResultForAlixDto();
		alixDto.setApplyNo(applyNo);
		alixDto.setCode(resultEnum.getCode());
		alixDto.setLink(DscAlixLinkEnum.CREDITFRONT.getCode());
		alixDto.setMessage(resultEnum.getMsg());
		return alixDto;
	}
	
	
	/**
	 * 卡用途内部类
	 * Package : com.yixin.kepler.core.domain.webank
	 * 
	 * @author YixinCapital -- wangwenlong
	 *		   2018年7月12日 上午11:48:14
	 *
	 */
	class CardUsage {
	
		public static final String THREE = "3"; //验三
		
		public static final String FOUR = "4"; //验四
	}
}
